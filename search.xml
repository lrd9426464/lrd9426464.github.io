<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Map</title>
    <url>/2020/07/26/Map/</url>
    <content><![CDATA[<h4 id="通过经纬度计算两个位置的距离"><a href="#通过经纬度计算两个位置的距离" class="headerlink" title="通过经纬度计算两个位置的距离"></a>通过经纬度计算两个位置的距离</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法定义 lat,lng</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetDistance</span>(<span class="params"> lat1,  lng1,  lat2,  lng2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> radLat1 = lat1*<span class="built_in">Math</span>.PI / <span class="number">180.0</span>;</span><br><span class="line">  <span class="keyword">var</span> radLat2 = lat2*<span class="built_in">Math</span>.PI / <span class="number">180.0</span>;</span><br><span class="line">  <span class="keyword">var</span> a = radLat1 - radLat2;</span><br><span class="line">  <span class="keyword">var</span>  b = lng1*<span class="built_in">Math</span>.PI / <span class="number">180.0</span> - lng2*<span class="built_in">Math</span>.PI / <span class="number">180.0</span>;</span><br><span class="line">  <span class="keyword">var</span> s = <span class="number">2</span> * <span class="built_in">Math</span>.asin(<span class="built_in">Math</span>.sqrt(<span class="built_in">Math</span>.pow(<span class="built_in">Math</span>.sin(a/<span class="number">2</span>),<span class="number">2</span>) +</span><br><span class="line">  <span class="built_in">Math</span>.cos(radLat1)*<span class="built_in">Math</span>.cos(radLat2)*<span class="built_in">Math</span>.pow(<span class="built_in">Math</span>.sin(b/<span class="number">2</span>),<span class="number">2</span>)));</span><br><span class="line">  s = s *<span class="number">6378.137</span> ;*<span class="comment">// EARTH_RADIUS;*</span></span><br><span class="line">  s = <span class="built_in">Math</span>.round(s * <span class="number">10000</span>) / <span class="number">10000</span>;</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用 return的距离单位为km</span></span><br><span class="line">GetDistance(<span class="number">10.0</span>,<span class="number">113.0</span>,<span class="number">12.0</span>,<span class="number">114.0</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>地图</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/07/26/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>origin</title>
    <url>/2020/10/13/origin/</url>
    <content><![CDATA[<p>在根目录下创建<code>vue.config.js</code>文件，文件内配置如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">devServer: &#123;</span><br><span class="line">	open: <span class="literal">true</span>,</span><br><span class="line">	host: <span class="string">'localhost'</span>,</span><br><span class="line">	port: <span class="number">8080</span>,</span><br><span class="line">	https: <span class="literal">false</span>,</span><br><span class="line">	<span class="comment">//以上的ip和端口是我们本机的;下面为需要跨域的</span></span><br><span class="line">	proxy: &#123;<span class="comment">//配置跨域</span></span><br><span class="line">		<span class="string">'/api'</span>: &#123;</span><br><span class="line">		target: <span class="string">'https://wis.qq.com/weather/'</span>,<span class="comment">//这里后台的地址模拟的;应该填写你们真实的后台接口</span></span><br><span class="line">		ws: <span class="literal">true</span>,</span><br><span class="line">		changOrigin: <span class="literal">true</span>,<span class="comment">//允许跨域</span></span><br><span class="line">		pathRewrite: &#123;</span><br><span class="line">		<span class="string">'^/api'</span>: <span class="string">''</span><span class="comment">//请求的时候使用这个api就可以</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>slot</title>
    <url>/2020/10/15/slot/</url>
    <content><![CDATA[<p>使用插槽可以在子组件中显示父组件中的内容：</p>
<p>首先在子组件中需要插入内容的地方添加<code>slot</code>标签和<code>name</code>属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;son&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;list_1&quot;&gt;</span><br><span class="line">      我是测试的子组件</span><br><span class="line">      &lt;slot name&#x3D;&quot;list_1&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

<p>然后再父组件中引入子组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;son&quot;&gt;</span><br><span class="line">    我是ceshi组件</span><br><span class="line">    &lt;my-son&gt;</span><br><span class="line">		&lt;template #list_1&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;template&gt;</span><br><span class="line">	&lt;&#x2F;my-son&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

<p>其中<code>&lt;my-son&gt;</code>是子组件，通过<code>template</code>标签插入所需要的内容，其中<code>#</code>后面紧跟子组件中<code>slot</code>标签的<code>name</code>属性值，一一对应。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>插槽</tag>
      </tags>
  </entry>
  <entry>
    <title>str</title>
    <url>/2020/08/18/str/</url>
    <content><![CDATA[<h3 id="面试：JS计算一个字符串中每个字符出现的次数"><a href="#面试：JS计算一个字符串中每个字符出现的次数" class="headerlink" title="面试：JS计算一个字符串中每个字符出现的次数"></a>面试：JS计算一个字符串中每个字符出现的次数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"jintiantianqizhenbucuo"</span>;</span><br><span class="line"><span class="comment">//创建一个空对象用来保存出现的字符</span></span><br><span class="line"><span class="keyword">var</span> obj=&#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> s <span class="keyword">of</span> str)&#123;</span><br><span class="line">    <span class="comment">//首先验证遍历到的字符是否已经在obj对象中</span></span><br><span class="line">   <span class="keyword">if</span>(obj[s]==<span class="literal">undefined</span>)&#123;</span><br><span class="line">       <span class="comment">//如果不存在，向obj中添加该属性，属性值设为1</span></span><br><span class="line">		obj[s]=<span class="number">1</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//如果存在，将该属性值加1</span></span><br><span class="line">		obj[s]++;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure>

<p>输出结果为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">a</span>: <span class="number">2</span>,<span class="attr">b</span>: <span class="number">1</span>,<span class="attr">c</span>: <span class="number">1</span>,<span class="attr">e</span>: <span class="number">1</span>,<span class="attr">h</span>: <span class="number">1</span>,<span class="attr">i</span>: <span class="number">4</span>,<span class="attr">j</span>: <span class="number">1</span>,<span class="attr">n</span>: <span class="number">4</span>,<span class="attr">o</span>: <span class="number">1</span>,<span class="attr">q</span>: <span class="number">1</span>,<span class="attr">t</span>: <span class="number">2</span>,<span class="attr">u</span>: <span class="number">2</span>,<span class="attr">z</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack</title>
    <url>/2020/08/28/webpack/</url>
    <content><![CDATA[<p>title: webpack<br>date: 2020-08-28 17:06:04<br>tags:<br>    - Webpack<br>categories:<br>    - 前端</p>
<h3 id="WebPack的基本使用"><a href="#WebPack的基本使用" class="headerlink" title="WebPack的基本使用"></a>WebPack的基本使用</h3><h4 id="1-webpack的使用场景"><a href="#1-webpack的使用场景" class="headerlink" title="1.webpack的使用场景"></a>1.webpack的使用场景</h4><ul>
<li><p>创建空白目录，在根目录下运行<code>npm init -y</code>，初始化包管理配置文件<code>package.json</code></p>
<p><img src="/images/image-20200828174143991.png" alt="01"></p>
</li>
<li><p>新建一个src源代码目录</p>
<p><img src="/images/image-20200828174310635.png" alt="02"></p>
</li>
<li><p>在src目录下创建<code>index.html</code>首页</p>
<p><img src="/images/image-20200828174451805.png" alt="03"></p>
</li>
<li><p>初始化首页的基本结构</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第1个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第2个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第3个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第4个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第5个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第6个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第7个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第8个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第9个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>运行<code>npm install jquery -S</code>命令，安装<code>jQuery</code></p>
<p><img src="/images/image-20200828174703636.png" alt="04"></p>
</li>
<li><p>在src目录下创建<code>index.js</code>文件，通过以下代码引入jquery</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>敲代码，实现列表隔行变色</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	$(<span class="string">'li:odd'</span>).css(<span class="string">'backgroundColor'</span>,<span class="string">'red'</span>);</span><br><span class="line">	$(<span class="string">'li:even'</span>).css(<span class="string">'backgroundColor'</span>,<span class="string">'yellow'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>index.html</code>文件中使用<code>script</code>标签引入<code>index.js</code>文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在浏览器中打开<code>index.html</code>文件，发现没有效果，而且会报错，这是因为该程序中使用了ES6的模块化语法，浏览器不支持该语法，所以才报错，解决方法是配置<code>webpack</code>，将代码转换之后在运行</p>
</li>
</ul>
<h4 id="2-webpack的基本配置"><a href="#2-webpack的基本配置" class="headerlink" title="2.webpack的基本配置"></a>2.webpack的基本配置</h4><ul>
<li><p>运行<code>npm install webpack webpack-cli -D</code>命令，安装<code>webpack</code>相关的包</p>
<p><img src="/images/image-20200828180103297.png" alt="05"></p>
</li>
<li><p>在项目根目录中，创建名为<code>webpack.config.js</code>的<code>webpack</code>配置文件</p>
<p><img src="/images/image-20200828180146391.png" alt="06"></p>
</li>
<li><p>在<code>webpack</code>配置文件中，初始化如下基本配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">	mode:<span class="string">'development'</span> <span class="comment">//mode 用来指定构建模式，有两种模式 'development'和'production'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>webpack.json</code>配置文件中的<code>scripts</code>节点下，新增<code>dev</code>脚本如下:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts":&#123;</span><br><span class="line">	"dev":"webpack" //scripts 节点下的脚本，可以通过 npm run 执行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在终端中运行<code>npm run dev</code>命令，启动<code>webpack</code>进行项目打包</p>
<p><img src="/images/image-20200828181216923.png" alt="07"></p>
</li>
<li><p>在<code>index.html</code>文件中引入打包后的<code>main.js</code>文件，再次运行<code>index.html</code>文件，发现效果已经出现</p>
<p><img src="/images/image-20200828181315137.png" alt="08"></p>
</li>
</ul>
<h4 id="2-1-配置打包的入口与出口"><a href="#2-1-配置打包的入口与出口" class="headerlink" title="2.1.配置打包的入口与出口"></a>2.1.配置打包的入口与出口</h4><p><code>webpack</code>的4.x版本中默认约定：</p>
<ul>
<li>打包的入口文件为<code>src</code>→<code>index.js</code></li>
<li>打包的出口文件为<code>dist</code>→<code>main.js</code></li>
</ul>
<p>如果想修改打包的入口与出口，可以在<code>webpack.config.js</code>中新增如下配置信息：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    entry:path.join(__diename,<span class="string">"./src/index.js"</span>), <span class="comment">//打包入口文件</span></span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:“bundle.js, <span class="comment">//输出文件名</span></span><br><span class="line">        path:path.join(__diename,<span class="string">"./dist"</span>) <span class="comment">//输出文件存放路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>在终端中运行<code>npm run dev</code>命令，启动<code>webpack</code>进行项目打包</p>
<p><img src="/images/20200830151803.png" alt="09"></p>
</li>
<li><p>在<code>index.html</code>文件中引入打包后的<code>bundle.js</code>文件，再次运行<code>index.html</code>文件</p>
<p><img src="/images/image-20200828181315137.png" alt="10"></p>
</li>
</ul>
<h4 id="2-2-配置webpack的自动打包功能"><a href="#2-2-配置webpack的自动打包功能" class="headerlink" title="2.2.配置webpack的自动打包功能"></a>2.2.配置<code>webpack</code>的自动打包功能</h4><p>这个功能是为了保证修改代码后会自动重新打包，效果会自动更新</p>
<ul>
<li>运行<code>npm install webpack-dev-server -D</code>命令，安装支持项目自动打包的工具</li>
<li>修改<code>package.json</code> → <code>scripts</code>中的<code>dev</code>命令如下：</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"dev":"webpack-dev-server"</span><br></pre></td></tr></table></figure>

<ul>
<li>将<code>src→index.html</code>中<code>script</code>脚本的引用路径，修改为<code>&quot;/bundle.js&quot;</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在终端中运行<code>npm run dev</code>命令，重新打包，打开红线标注的地址，进入<code>src</code>文件夹就可以看到效果</li>
</ul>
<p><img src="/images/11.png" alt="11"></p>
<h6 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h6><ul>
<li><code>webpack-dev-server</code>会启动一个实时打包的http服务器</li>
<li><code>webpack-dev-server</code>打包生成的输出文件，默认放到了项目根目录中，而且是虚拟的</li>
</ul>
<h4 id="2-3配置html-webpack-plugin插件生成预览页面"><a href="#2-3配置html-webpack-plugin插件生成预览页面" class="headerlink" title="2.3配置html-webpack-plugin插件生成预览页面"></a>2.3配置html-webpack-plugin插件生成预览页面</h4><p>通过上面的操作可以完成自动打包功能，但是，每次打开网页后需要在进入<code>src</code>文件夹，而不能立即显示想要看到的页面，所以需要配置<code>html-webpack-plugin</code>来解决这个问题。</p>
<ul>
<li>安装依赖</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i html-webpack-plugin -D</span><br></pre></td></tr></table></figure>

<ul>
<li>修改<code>webpack.config.js</code>文件头部区域，添加配置信息：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>)</span><br><span class="line"><span class="keyword">const</span> htmlplugin = <span class="keyword">new</span> HtmlWebpackPlugin(&#123; <span class="comment">//创建插件的实例对象</span></span><br><span class="line">    template:<span class="string">"./src/index.html"</span>, <span class="comment">//指定要用到的模板文件</span></span><br><span class="line">    filename:<span class="string">"index.html"</span> <span class="comment">//指定生成的文件名，该文件存在于内存中，在目录里不显示</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>修改<code>webpack.config.js</code>文件向外暴露的配置对象，添加如下配置信息：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">	plugins:[ htmlplugin ] <span class="comment">//plugins数组是webpack打包期间会用到的一些插件列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>执行<code>npm run dev</code>命令打包，打开<code>http://localhost:8080</code>就可以直接看到页面</li>
<li>但此时还需要手动打开网址，如果想要运行<code>npm run dev</code>命令后自动打开网页，还需要配置<code>package.json</code>中的信息</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts":&#123;</span><br><span class="line">	"dev":"webpack-dev-server --open "</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>还可以通过添加- -host配置ip地址，- -port配置端口</li>
</ul>
<h4 id="3-打包非js文件"><a href="#3-打包非js文件" class="headerlink" title="3.打包非js文件"></a>3.打包非js文件</h4><p>在开发过程中，<code>webpack</code>默认只能打包js文件，其他非js文件，需要调用<code>loader</code>加载器才可以正常打包，否则会报错。</p>
<p><code>loader</code>加载器可以帮助<code>webpack</code>打包处理特定的文件，比如：</p>
<ol>
<li><code>less-loader</code>可以打包处理<code>less</code>相关文件</li>
<li><code>sass-loader</code>可以打包处理<code>sass</code>相关文件</li>
<li><code>url-loader</code>可以打包处理<code>css</code>中与<code>url</code>路径相关的文件</li>
</ol>
<h4 id="3-1打包处理css文件"><a href="#3-1打包处理css文件" class="headerlink" title="3.1打包处理css文件"></a>3.1打包处理css文件</h4><ul>
<li>运行<code>npm i style-loader css-loader -D</code>命令，安装处理<code>css</code>文件的<code>loader</code></li>
<li>在<code>webpack.config.js</code>的<code>moudle</code>→<code>rules</code>数组中，添加<code>loader</code>规则如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所有第三方文件模块的匹配规则</span></span><br><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">	rules:[</span><br><span class="line">		&#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="attr">use</span>:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>]&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，<code>test</code>表示匹配的文件类型，<code>use</code>表示对应要调用的<code>loader</code> ，<code>style-loader</code>，<code>css-loader</code>的顺序不能错，多个<code>loader</code>的调用顺序是从后往前</p>
<h4 id="3-2打包处理less文件"><a href="#3-2打包处理less文件" class="headerlink" title="3.2打包处理less文件"></a>3.2打包处理less文件</h4><ul>
<li>运行<code>npm i less-loader less -D</code>命令</li>
<li>在<code>webpack.config.js</code>的<code>moudle</code>→<code>rules</code>数组中，添加<code>loader</code>规则如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所有第三方文件模块的匹配规则</span></span><br><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">	rules:[</span><br><span class="line">		&#123;<span class="attr">test</span>:<span class="regexp">/\.less$/</span>,<span class="attr">use</span>:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>,<span class="string">'less-loader'</span>]&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>less-loader</code>也需要依赖<code>style-loader</code>和<code>css-loader</code>，但是之前安装过了，所以这里不需要再安装。</p>
<h5 id="注意：每当需要处理一个不同类型的文件，都需要在rules中新增一项"><a href="#注意：每当需要处理一个不同类型的文件，都需要在rules中新增一项" class="headerlink" title="注意：每当需要处理一个不同类型的文件，都需要在rules中新增一项"></a>注意：每当需要处理一个不同类型的文件，都需要在rules中新增一项</h5><h4 id="3-3打包处理scss文件"><a href="#3-3打包处理scss文件" class="headerlink" title="3.3打包处理scss文件"></a>3.3打包处理scss文件</h4><ul>
<li>运行<code>npm i sass-loader node-sass -D</code>命令</li>
<li>在<code>webpack.config.js</code>的<code>moudle</code>→<code>rules</code>数组中，添加<code>loader</code>规则如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所有第三方文件模块的匹配规则</span></span><br><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">	rules:[</span><br><span class="line">		&#123;<span class="attr">test</span>:<span class="regexp">/\.sass$/</span>,<span class="attr">use</span>:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>,<span class="string">'sass-loader'</span>]&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有时安装<code>node-sass</code>会失败，可以使用<code>npm i node-sass --sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</code>这个命令来安装</p>
<h4 id="3-4配置postCSS自动添加css的兼容前缀"><a href="#3-4配置postCSS自动添加css的兼容前缀" class="headerlink" title="3.4配置postCSS自动添加css的兼容前缀"></a>3.4配置postCSS自动添加css的兼容前缀</h4><p>先来演示一个的兼容性问题：</p>
<ul>
<li>在<code>index.html</code>文件中添加一个<code>input</code>标签</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"测试"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>用伪类选择器设置<code>placeholder</code>的文字颜色为红色，打开不同的浏览器看效果会发现这个css属性在不同浏览器中会有兼容性问题</li>
<li>而每次都要手动添加兼容前缀太麻烦，解决办法就是使用<code>postCSS</code></li>
</ul>
<p>使用方法：</p>
<ul>
<li>运行<code>npm i postcss-loader autoprefixer -D</code>命令</li>
<li>在项目根目录下创建<code>postcss</code>的配置文件<code>postcss.config.js</code>，并初始化如下配置：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>) <span class="comment">//打入自动添加前缀的插件</span></span><br><span class="line">moudle.exports=&#123;</span><br><span class="line">	plugins:[ autoprefixer ] <span class="comment">//挂载插件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在<code>webpack.config.js</code>的<code>moudle</code>→<code>rules</code>数组中，修改<code>css</code>的<code>loader</code>规则如下：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">moudle:&#123;</span><br><span class="line">	rules:[</span><br><span class="line">		&#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="attr">use</span>:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>,<span class="string">'postcss-loader'</span>]&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-5打包图片和文字文件"><a href="#3-5打包图片和文字文件" class="headerlink" title="3.5打包图片和文字文件"></a>3.5打包图片和文字文件</h4><ul>
<li>运行<code>npm i url-loader file-loader -D</code>命令</li>
<li>在<code>webpack.config.js</code>的<code>moudle</code>→<code>rules</code>数组中，添加<code>loader</code>规则如下：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">moudle:&#123;</span><br><span class="line">	rules:[</span><br><span class="line">		&#123;<span class="attr">test</span>:<span class="regexp">/\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$/</span>,<span class="attr">use</span>:[<span class="string">'url-loader?limit=16940'</span>]&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中？之后的是loader的参数项。</p>
<p>limit用来指定图片的大小，单位是字节（byte），只有小于limit大小的图片，才会被转为base64图片</p>
<h4 id="3-6打包处理js文件中的高级语法"><a href="#3-6打包处理js文件中的高级语法" class="headerlink" title="3.6打包处理js文件中的高级语法"></a>3.6打包处理js文件中的高级语法</h4><ul>
<li>安装<code>babel</code>转换器相关的包：运行<code>npm i babel-loader @babel/core @babel/runtime -D</code>命令</li>
<li>安装<code>babel</code>语法插件相关的包：<code>npm i @babel/preset-env @babel/plugin-transform-runtime @babel/plugin-proposal-class-properties -D</code></li>
<li>在项目根目录中，创建<code>babel</code>配置文件<code>babel.config.js</code>并初始化基本配置如下：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">	presets:[<span class="string">'@babel/preset-env'</span>],</span><br><span class="line">	plugins:[<span class="string">'@babel/plugin-transform-runtime'</span>,<span class="string">'@babel/plugin-proposal-class-properties'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在<code>webpack.config.js</code>的<code>moudle</code>→<code>rules</code>数组中，添加<code>loader</code>规则如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//exclude 为排除项，表示babel→loader不需要处理node_modules中的js文件</span></span><br><span class="line">&#123;<span class="attr">test</span>:<span class="regexp">/\.js$/</span>,<span class="attr">use</span>:[<span class="string">'babel-loader'</span>],<span class="attr">exclude</span>:<span class="regexp">/node_modules/</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-打包VUE单文件组件"><a href="#4-打包VUE单文件组件" class="headerlink" title="4.打包VUE单文件组件"></a>4.打包VUE单文件组件</h4><h4 id="4-1配置webpack中的vue组件加载器"><a href="#4-1配置webpack中的vue组件加载器" class="headerlink" title="4.1配置webpack中的vue组件加载器"></a>4.1配置<code>webpack</code>中的<code>vue</code>组件加载器</h4><ul>
<li>安装依赖</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i vue-loader vue-template-compiler -D</span><br></pre></td></tr></table></figure>

<ul>
<li>在<code>webpack.config.js</code>配置文件中，添加<code>vue-loader</code>的配置项</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">	<span class="built_in">module</span>:&#123;</span><br><span class="line">		rules:[</span><br><span class="line">			...</span><br><span class="line">			&#123;<span class="attr">test</span>:<span class="regexp">/\.vue$/</span>,<span class="attr">loader</span>:<span class="string">'vue-loader'</span>&#125;</span><br><span class="line">		]</span><br><span class="line">	&#125;,</span><br><span class="line">	plugins:[ ...,<span class="keyword">new</span> VueLoaderPlugin() ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2在webpack项目中使用vue"><a href="#4-2在webpack项目中使用vue" class="headerlink" title="4.2在webpack项目中使用vue"></a>4.2在webpack项目中使用vue</h4><ul>
<li><p>安装<code>vue</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i vue -S</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>src</code>→<code>index.js</code>入口文件中，通过<code>import vue from &#39;vue&#39;</code>来导入vue构造函数</p>
</li>
<li><p>创建<code>vue</code>的实例对象，并制定要控制的el区域</p>
</li>
<li><p>通过<code>render</code>函数渲染App根组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.导入vue构造函数</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="comment">//2.导入App根组件</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./components/App.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">	<span class="comment">//3.指定vm实例要控制的页面区域</span></span><br><span class="line">	el:<span class="string">"#app"</span>,</span><br><span class="line">	<span class="comment">//4.通过render函数，把指定的组件渲染到el区域中</span></span><br><span class="line">	render:<span class="function"><span class="params">h</span>=&gt;</span>h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="4-3webpack打包发布"><a href="#4-3webpack打包发布" class="headerlink" title="4.3webpack打包发布"></a>4.3webpack打包发布</h4><p>上线前需要通过<code>webpack</code>将应用进行整体打包，可以通过package.json文件配置打包命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在package.json文件中配置webpack打包命令</span></span><br><span class="line"><span class="comment">//该命令默认加载项目根目录中的webpack.config.js配置文件</span></span><br><span class="line"><span class="string">"scripts"</span>:&#123;</span><br><span class="line">	<span class="comment">//用于打包的命令</span></span><br><span class="line">	<span class="string">"build"</span>:<span class="string">"webpack -p"</span></span><br><span class="line">	<span class="comment">//用于发布的命令</span></span><br><span class="line">	<span class="string">"dev"</span>:<span class="string">"webpack-dev-server --open --host 127.0.0.1 --port 3000"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>ES6ES7新特性</title>
    <url>/2020/08/11/ES6%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h2 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性"></a>ES6新特性</h2><blockquote>
<h4 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h4><h4 id="参数增强"><a href="#参数增强" class="headerlink" title="参数增强"></a>参数增强</h4><p>函数的形参可以设置默认值</p>
<h4 id="let和const"><a href="#let和const" class="headerlink" title="let和const"></a>let和const</h4><p>ES6增加了两种声明变量的方式，其中let声明的变量不会被声明提前，const声明的变量不允许修改</p>
<h4 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h4><h4 id="for…of…遍历查询"><a href="#for…of…遍历查询" class="headerlink" title="for…of…遍历查询"></a>for…of…遍历查询</h4><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p>特例: 只有不希望函数内this与函数外this保持一致时，才不能用箭头函数简写</p>
<h4 id="class类"><a href="#class类" class="headerlink" title="class类"></a>class类</h4><h4 id="展开运算符（用连续的三个点（…）表示）"><a href="#展开运算符（用连续的三个点（…）表示）" class="headerlink" title="展开运算符（用连续的三个点（…）表示）"></a>展开运算符（用连续的三个点（…）表示）</h4></blockquote>
<h2 id="ES7新特性"><a href="#ES7新特性" class="headerlink" title="ES7新特性"></a>ES7新特性</h2><blockquote>
<p>1.数组中添加了includes方法，该方法可以判断数组中是否含有指定数据，返回结果为布尔类型，如果存在，返回true；否则返回false。</p>
<p>2.增加了指数运算符（**）</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
</search>
